syntax = "proto3";

package mlx_inference;

// Service for distributed inference
service InferenceService {
    // Process layers on this worker
    rpc ProcessLayers(LayerRequest) returns (LayerResponse);
    
    // Transfer tensor between nodes
    rpc TransferTensor(TensorTransfer) returns (TransferResponse);
    
    // Health check
    rpc HealthCheck(Empty) returns (HealthStatus);
    
    // Get device information
    rpc GetDeviceInfo(Empty) returns (DeviceInfo);
}

// Empty message for requests without parameters
message Empty {}

// Tensor metadata
message TensorMetadata {
    repeated int64 shape = 1;
    string dtype = 2;
    bool compressed = 3;
    string original_dtype = 4;  // Original dtype before conversion (e.g., bfloat16)
    bool requires_conversion = 5;  // Whether dtype conversion is needed during deserialization
    string checksum = 6;  // SHA-256 checksum of tensor data for verification
    int64 size = 7;  // Size of tensor data in bytes
}

// KV Cache metadata
message KVCacheMetadata {
    string type = 1;  // "empty_cache", "kv_cache", etc.
    int32 length = 2;
    repeated KVCacheEntry entries = 3;
}

message KVCacheEntry {
    string type = 1;  // "none", "kv_tuple", "kv_object", "tensor"
    int64 offset = 2;
    int64 size = 3;
    TensorMetadata keys_meta = 4;    // For KV entries
    TensorMetadata values_meta = 5;  // For KV entries
    TensorMetadata meta = 6;         // For single tensor entries
    int64 cache_offset = 7;          // KVCache.offset value
    int64 cache_step = 8;            // KVCache.step value
}

// Layer processing request
message LayerRequest {
    string request_id = 1;
    bytes input_tensor = 2;
    repeated int32 layer_indices = 3;
    TensorMetadata metadata = 4;
    map<string, string> context = 5;  // Additional context (e.g., attention mask)
    bytes kv_cache_data = 6;      // Serialized KV cache
    KVCacheMetadata kv_cache_metadata = 7;  // KV cache metadata
}

// Layer processing response
message LayerResponse {
    string request_id = 1;
    bytes output_tensor = 2;
    TensorMetadata metadata = 3;
    float processing_time_ms = 4;
    string device_id = 5;
    bytes kv_cache_data = 6;      // Updated KV cache
    KVCacheMetadata kv_cache_metadata = 7;  // Updated KV cache metadata
}

// Health status
message HealthStatus {
    bool healthy = 1;
    string device_id = 2;
    int64 timestamp = 3;
    map<string, string> details = 4;
}

// Device information
message DeviceInfo {
    string device_id = 1;
    string hostname = 2;
    int32 rank = 3;
    string role = 4;
    repeated int32 assigned_layers = 5;
    map<string, string> capabilities = 6;
    float gpu_utilization = 7;
    float memory_usage_gb = 8;
}

// Tensor transfer message
message TensorTransfer {
    string tensor_id = 1;
    repeated int64 shape = 2;
    bytes data = 3;
    string dtype = 4;
    int32 source_rank = 5;
    int32 dest_rank = 6;
}

// Transfer response
message TransferResponse {
    bool success = 1;
    string message = 2;
    float transfer_time_ms = 3;
}