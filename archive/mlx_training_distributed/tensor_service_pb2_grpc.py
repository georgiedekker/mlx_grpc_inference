# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import tensor_service_pb2 as tensor__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tensor_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TensorServiceStub(object):
    """Tensor service for distributed inference
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendTensor = channel.unary_unary(
                '/tensor_service.TensorService/SendTensor',
                request_serializer=tensor__service__pb2.SendTensorRequest.SerializeToString,
                response_deserializer=tensor__service__pb2.SendTensorResponse.FromString,
                _registered_method=True)
        self.GetTensor = channel.unary_unary(
                '/tensor_service.TensorService/GetTensor',
                request_serializer=tensor__service__pb2.GetTensorRequest.SerializeToString,
                response_deserializer=tensor__service__pb2.GetTensorResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/tensor_service.TensorService/HealthCheck',
                request_serializer=tensor__service__pb2.HealthRequest.SerializeToString,
                response_deserializer=tensor__service__pb2.HealthResponse.FromString,
                _registered_method=True)
        self.ForwardPass = channel.unary_unary(
                '/tensor_service.TensorService/ForwardPass',
                request_serializer=tensor__service__pb2.ForwardPassRequest.SerializeToString,
                response_deserializer=tensor__service__pb2.ForwardPassResponse.FromString,
                _registered_method=True)
        self.GetClusterStatus = channel.unary_unary(
                '/tensor_service.TensorService/GetClusterStatus',
                request_serializer=tensor__service__pb2.ClusterStatusRequest.SerializeToString,
                response_deserializer=tensor__service__pb2.ClusterStatusResponse.FromString,
                _registered_method=True)


class TensorServiceServicer(object):
    """Tensor service for distributed inference
    """

    def SendTensor(self, request, context):
        """Send tensor to this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTensor(self, request, context):
        """Get tensor from this device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ForwardPass(self, request, context):
        """Execute forward pass on assigned layers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetClusterStatus(self, request, context):
        """Get cluster status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TensorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.SendTensor,
                    request_deserializer=tensor__service__pb2.SendTensorRequest.FromString,
                    response_serializer=tensor__service__pb2.SendTensorResponse.SerializeToString,
            ),
            'GetTensor': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTensor,
                    request_deserializer=tensor__service__pb2.GetTensorRequest.FromString,
                    response_serializer=tensor__service__pb2.GetTensorResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=tensor__service__pb2.HealthRequest.FromString,
                    response_serializer=tensor__service__pb2.HealthResponse.SerializeToString,
            ),
            'ForwardPass': grpc.unary_unary_rpc_method_handler(
                    servicer.ForwardPass,
                    request_deserializer=tensor__service__pb2.ForwardPassRequest.FromString,
                    response_serializer=tensor__service__pb2.ForwardPassResponse.SerializeToString,
            ),
            'GetClusterStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClusterStatus,
                    request_deserializer=tensor__service__pb2.ClusterStatusRequest.FromString,
                    response_serializer=tensor__service__pb2.ClusterStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tensor_service.TensorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tensor_service.TensorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TensorService(object):
    """Tensor service for distributed inference
    """

    @staticmethod
    def SendTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tensor_service.TensorService/SendTensor',
            tensor__service__pb2.SendTensorRequest.SerializeToString,
            tensor__service__pb2.SendTensorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tensor_service.TensorService/GetTensor',
            tensor__service__pb2.GetTensorRequest.SerializeToString,
            tensor__service__pb2.GetTensorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tensor_service.TensorService/HealthCheck',
            tensor__service__pb2.HealthRequest.SerializeToString,
            tensor__service__pb2.HealthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ForwardPass(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tensor_service.TensorService/ForwardPass',
            tensor__service__pb2.ForwardPassRequest.SerializeToString,
            tensor__service__pb2.ForwardPassResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetClusterStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tensor_service.TensorService/GetClusterStatus',
            tensor__service__pb2.ClusterStatusRequest.SerializeToString,
            tensor__service__pb2.ClusterStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
