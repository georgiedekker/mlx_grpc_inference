syntax = "proto3";

package tensor_service;

// Tensor data for transmission
message TensorData {
    string tensor_id = 1;
    repeated int32 shape = 2;
    string dtype = 3;
    bytes data = 4;
    string compression = 5;
    string device_source = 6;
    string device_target = 7;
    double timestamp = 8;
}

// Request to send tensor data
message SendTensorRequest {
    TensorData tensor = 1;
}

// Response for tensor send operation
message SendTensorResponse {
    bool success = 1;
    string message = 2;
}

// Request to get tensor data
message GetTensorRequest {
    string tensor_id = 1;
    double timeout = 2;
}

// Response with tensor data
message GetTensorResponse {
    bool success = 1;
    string message = 2;
    TensorData tensor = 3;
}

// Health check request
message HealthRequest {
    string device_id = 1;
}

// Health check response
message HealthResponse {
    bool healthy = 1;
    string device_id = 2;
    double timestamp = 3;
    string status_message = 4;
}

// Forward pass request
message ForwardPassRequest {
    TensorData input_tensor = 1;
    int32 layer_start = 2;
    int32 layer_end = 3;
    string pass_id = 4;
}

// Forward pass response
message ForwardPassResponse {
    bool success = 1;
    string message = 2;
    TensorData output_tensor = 3;
}

// Device information
message DeviceInfo {
    string device_id = 1;
    string hostname = 2;
    int32 port = 3;
    string role = 4;
    repeated int32 layers = 5;
    string status = 6;
}

// Cluster status request
message ClusterStatusRequest {
    string requesting_device = 1;
}

// Cluster status response
message ClusterStatusResponse {
    repeated DeviceInfo devices = 1;
    string coordinator = 2;
}

// Tensor service for distributed inference
service TensorService {
    // Send tensor to this device
    rpc SendTensor(SendTensorRequest) returns (SendTensorResponse);
    
    // Get tensor from this device
    rpc GetTensor(GetTensorRequest) returns (GetTensorResponse);
    
    // Health check
    rpc HealthCheck(HealthRequest) returns (HealthResponse);
    
    // Execute forward pass on assigned layers
    rpc ForwardPass(ForwardPassRequest) returns (ForwardPassResponse);
    
    // Get cluster status
    rpc GetClusterStatus(ClusterStatusRequest) returns (ClusterStatusResponse);
}