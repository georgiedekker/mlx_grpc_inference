# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import distributed_comm_pb2 as distributed__comm__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in distributed_comm_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DistributedCommStub(object):
    """Service for distributed communication between devices
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send = channel.unary_unary(
                '/mlx_distributed.comm.DistributedComm/Send',
                request_serializer=distributed__comm__pb2.SendRequest.SerializeToString,
                response_deserializer=distributed__comm__pb2.SendResponse.FromString,
                _registered_method=True)
        self.Receive = channel.unary_stream(
                '/mlx_distributed.comm.DistributedComm/Receive',
                request_serializer=distributed__comm__pb2.ReceiveRequest.SerializeToString,
                response_deserializer=distributed__comm__pb2.ReceiveResponse.FromString,
                _registered_method=True)
        self.Broadcast = channel.unary_unary(
                '/mlx_distributed.comm.DistributedComm/Broadcast',
                request_serializer=distributed__comm__pb2.BroadcastRequest.SerializeToString,
                response_deserializer=distributed__comm__pb2.BroadcastResponse.FromString,
                _registered_method=True)
        self.AllReduce = channel.unary_unary(
                '/mlx_distributed.comm.DistributedComm/AllReduce',
                request_serializer=distributed__comm__pb2.AllReduceRequest.SerializeToString,
                response_deserializer=distributed__comm__pb2.AllReduceResponse.FromString,
                _registered_method=True)
        self.Barrier = channel.unary_unary(
                '/mlx_distributed.comm.DistributedComm/Barrier',
                request_serializer=distributed__comm__pb2.BarrierRequest.SerializeToString,
                response_deserializer=distributed__comm__pb2.BarrierResponse.FromString,
                _registered_method=True)


class DistributedCommServicer(object):
    """Service for distributed communication between devices
    """

    def Send(self, request, context):
        """Send data to another device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Receive(self, request, context):
        """Receive data from another device (blocking call)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Broadcast(self, request, context):
        """Broadcast data from root to all devices
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllReduce(self, request, context):
        """AllReduce operation for distributed aggregation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Barrier(self, request, context):
        """Barrier synchronization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributedCommServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=distributed__comm__pb2.SendRequest.FromString,
                    response_serializer=distributed__comm__pb2.SendResponse.SerializeToString,
            ),
            'Receive': grpc.unary_stream_rpc_method_handler(
                    servicer.Receive,
                    request_deserializer=distributed__comm__pb2.ReceiveRequest.FromString,
                    response_serializer=distributed__comm__pb2.ReceiveResponse.SerializeToString,
            ),
            'Broadcast': grpc.unary_unary_rpc_method_handler(
                    servicer.Broadcast,
                    request_deserializer=distributed__comm__pb2.BroadcastRequest.FromString,
                    response_serializer=distributed__comm__pb2.BroadcastResponse.SerializeToString,
            ),
            'AllReduce': grpc.unary_unary_rpc_method_handler(
                    servicer.AllReduce,
                    request_deserializer=distributed__comm__pb2.AllReduceRequest.FromString,
                    response_serializer=distributed__comm__pb2.AllReduceResponse.SerializeToString,
            ),
            'Barrier': grpc.unary_unary_rpc_method_handler(
                    servicer.Barrier,
                    request_deserializer=distributed__comm__pb2.BarrierRequest.FromString,
                    response_serializer=distributed__comm__pb2.BarrierResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mlx_distributed.comm.DistributedComm', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mlx_distributed.comm.DistributedComm', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DistributedComm(object):
    """Service for distributed communication between devices
    """

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.comm.DistributedComm/Send',
            distributed__comm__pb2.SendRequest.SerializeToString,
            distributed__comm__pb2.SendResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Receive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mlx_distributed.comm.DistributedComm/Receive',
            distributed__comm__pb2.ReceiveRequest.SerializeToString,
            distributed__comm__pb2.ReceiveResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Broadcast(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.comm.DistributedComm/Broadcast',
            distributed__comm__pb2.BroadcastRequest.SerializeToString,
            distributed__comm__pb2.BroadcastResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllReduce(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.comm.DistributedComm/AllReduce',
            distributed__comm__pb2.AllReduceRequest.SerializeToString,
            distributed__comm__pb2.AllReduceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Barrier(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.comm.DistributedComm/Barrier',
            distributed__comm__pb2.BarrierRequest.SerializeToString,
            distributed__comm__pb2.BarrierResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
