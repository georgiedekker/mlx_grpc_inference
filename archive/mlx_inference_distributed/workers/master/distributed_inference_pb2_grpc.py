# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import distributed_inference_pb2 as distributed__inference__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in distributed_inference_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class DistributedInferenceStub(object):
    """Service definition for distributed MLX inference
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeShard = channel.unary_unary(
                '/mlx_distributed.DistributedInference/InitializeShard',
                request_serializer=distributed__inference__pb2.InitializeShardRequest.SerializeToString,
                response_deserializer=distributed__inference__pb2.InitializeShardResponse.FromString,
                _registered_method=True)
        self.Forward = channel.unary_unary(
                '/mlx_distributed.DistributedInference/Forward',
                request_serializer=distributed__inference__pb2.ForwardRequest.SerializeToString,
                response_deserializer=distributed__inference__pb2.ForwardResponse.FromString,
                _registered_method=True)
        self.HealthCheck = channel.unary_unary(
                '/mlx_distributed.DistributedInference/HealthCheck',
                request_serializer=distributed__inference__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=distributed__inference__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.GetCapabilities = channel.unary_unary(
                '/mlx_distributed.DistributedInference/GetCapabilities',
                request_serializer=distributed__inference__pb2.GetCapabilitiesRequest.SerializeToString,
                response_deserializer=distributed__inference__pb2.GetCapabilitiesResponse.FromString,
                _registered_method=True)
        self.Shutdown = channel.unary_unary(
                '/mlx_distributed.DistributedInference/Shutdown',
                request_serializer=distributed__inference__pb2.ShutdownRequest.SerializeToString,
                response_deserializer=distributed__inference__pb2.ShutdownResponse.FromString,
                _registered_method=True)


class DistributedInferenceServicer(object):
    """Service definition for distributed MLX inference
    """

    def InitializeShard(self, request, context):
        """Initialize a device with its shard of the model
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Forward(self, request, context):
        """Process a forward pass through this device's layers
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCapabilities(self, request, context):
        """Get device capabilities
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Shutdown(self, request, context):
        """Shutdown the device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributedInferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeShard': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeShard,
                    request_deserializer=distributed__inference__pb2.InitializeShardRequest.FromString,
                    response_serializer=distributed__inference__pb2.InitializeShardResponse.SerializeToString,
            ),
            'Forward': grpc.unary_unary_rpc_method_handler(
                    servicer.Forward,
                    request_deserializer=distributed__inference__pb2.ForwardRequest.FromString,
                    response_serializer=distributed__inference__pb2.ForwardResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=distributed__inference__pb2.HealthCheckRequest.FromString,
                    response_serializer=distributed__inference__pb2.HealthCheckResponse.SerializeToString,
            ),
            'GetCapabilities': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCapabilities,
                    request_deserializer=distributed__inference__pb2.GetCapabilitiesRequest.FromString,
                    response_serializer=distributed__inference__pb2.GetCapabilitiesResponse.SerializeToString,
            ),
            'Shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.Shutdown,
                    request_deserializer=distributed__inference__pb2.ShutdownRequest.FromString,
                    response_serializer=distributed__inference__pb2.ShutdownResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mlx_distributed.DistributedInference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mlx_distributed.DistributedInference', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DistributedInference(object):
    """Service definition for distributed MLX inference
    """

    @staticmethod
    def InitializeShard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.DistributedInference/InitializeShard',
            distributed__inference__pb2.InitializeShardRequest.SerializeToString,
            distributed__inference__pb2.InitializeShardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.DistributedInference/Forward',
            distributed__inference__pb2.ForwardRequest.SerializeToString,
            distributed__inference__pb2.ForwardResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.DistributedInference/HealthCheck',
            distributed__inference__pb2.HealthCheckRequest.SerializeToString,
            distributed__inference__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCapabilities(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.DistributedInference/GetCapabilities',
            distributed__inference__pb2.GetCapabilitiesRequest.SerializeToString,
            distributed__inference__pb2.GetCapabilitiesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mlx_distributed.DistributedInference/Shutdown',
            distributed__inference__pb2.ShutdownRequest.SerializeToString,
            distributed__inference__pb2.ShutdownResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
